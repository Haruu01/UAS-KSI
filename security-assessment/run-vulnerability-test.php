<?php

require_once __DIR__ . '/../vendor/autoload.php';
require_once __DIR__ . '/VulnerabilityTester.php';

use SecurityAssessment\VulnerabilityTester;

// Bootstrap Laravel
$app = require_once __DIR__ . '/../bootstrap/app.php';
$app->make(\Illuminate\Contracts\Console\Kernel::class)->bootstrap();

echo "🛡️  PASSWORD MANAGER VULNERABILITY ASSESSMENT\n";
echo "=" . str_repeat("=", 50) . "\n\n";

// Initialize tester
$tester = new VulnerabilityTester();

// Run assessment
$results = $tester->runFullAssessment();

// Display summary
echo "\n" . "=" . str_repeat("=", 50) . "\n";
echo "📊 ASSESSMENT SUMMARY\n";
echo "=" . str_repeat("=", 50) . "\n";

$summary = $results['summary'];
echo "Total Tests: {$summary['total_tests']}\n";
echo "Vulnerable: {$summary['vulnerable']}\n";
echo "Secure: {$summary['secure']}\n";
echo "Errors: {$summary['errors']}\n";
echo "Skipped: {$summary['skipped']}\n";
echo "Risk Score: {$results['risk_score']}\n\n";

// Display detailed results
echo "📋 DETAILED RESULTS\n";
echo str_repeat("-", 50) . "\n";

foreach ($results['results'] as $result) {
    $status = $result['status'];
    $icon = match($status) {
        'VULNERABLE' => '🚨',
        'SECURE' => '✅',
        'ERROR' => '❌',
        'SKIP' => '⏭️',
        default => '❓'
    };
    
    echo "{$icon} {$result['test']}: {$status}\n";
    echo "   {$result['description']}\n\n";
}

// Generate recommendations
echo "🔧 SECURITY RECOMMENDATIONS\n";
echo str_repeat("-", 50) . "\n";

$vulnerabilities = array_filter($results['results'], fn($r) => $r['status'] === 'VULNERABLE');

if (empty($vulnerabilities)) {
    echo "✅ No critical vulnerabilities found!\n";
    echo "   Continue with regular security monitoring.\n\n";
} else {
    foreach ($vulnerabilities as $vuln) {
        echo "🔴 {$vuln['test']}\n";
        echo "   Issue: {$vuln['description']}\n";
        echo "   Action: " . getRecommendation($vuln['test']) . "\n\n";
    }
}

// Save report
$reportFile = __DIR__ . '/vulnerability-report-' . date('Y-m-d-H-i-s') . '.json';
file_put_contents($reportFile, json_encode($results, JSON_PRETTY_PRINT));
echo "📄 Full report saved to: {$reportFile}\n";

function getRecommendation($testName): string
{
    $recommendations = [
        'Horizontal Privilege Escalation' => 'Implement proper authorization checks in controllers and policies',
        'Vertical Privilege Escalation' => 'Add role-based middleware to admin routes',
        'SQL Injection' => 'Use parameterized queries and input validation',
        'XSS' => 'Implement proper output encoding and CSP headers',
        'Password Storage' => 'Ensure all passwords use strong encryption (AES-256)',
        'File Upload' => 'Add file type validation and content scanning',
        'Session Management' => 'Implement secure session configuration',
        'Authentication' => 'Add rate limiting and account lockout',
    ];
    
    foreach ($recommendations as $key => $recommendation) {
        if (str_contains($testName, $key)) {
            return $recommendation;
        }
    }
    
    return 'Review security implementation for this component';
}
